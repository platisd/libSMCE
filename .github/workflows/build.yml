name: Build & Test
on: [push, pull_request]
jobs:
  make-release:
    name: Publish release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [build-ubuntu, build-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download all build artifacts
        uses: actions/download-artifact@v2
      - name: Create Release
        shell: bash
        run: |
          tag_name="${GITHUB_REF##*/}"
          mkdir release
          mv $(find . -mindepth 1 -maxdepth 2 -type d -name 'libSMCE-*' -printf '%p/* ') release/
          cd release
          mkdir hashes
          for alg in md5 sha1 sha224 sha256 sha384 sha512; do
            "${alg}sum" $(find . -maxdepth 1 -type f | sed 's/.\///') > hashes/$alg.txt
          done
          mv hashes/* ./
          rmdir hashes
          hub release create $(find . -type f -printf "-a %p ") -m "libSMCE $tag_name" "$tag_name"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  coverage-linux:
    name: libSMCE (coverage) - Linux
    runs-on: ubuntu-latest
    container: ubuntu:hirsute
    env:
      DEBIAN_FRONTEND: "noninteractive"
    steps:
      - uses: actions/checkout@v2
      - name: Check deps
        run: |
          apt-get update
          apt-get install -y lcov curl wget git cmake ninja-build g++ libboost-all-dev libssl-dev
          ninja --version
          cmake --version
          wget -qO arduino-cli.tgz "https://github.com/arduino/arduino-cli/releases/download/0.18.3/arduino-cli_0.18.3_Linux_64bit.tar.gz"
          tar xzf arduino-cli.tgz
          mv arduino-cli /usr/local/bin/
          rm arduino-cli.tgz
          arduino-cli version
          arduino-cli core install arduino:avr
      - name: CMake configure
        run: |
          export BOOST_ROOT="$(pwd)/boost_root"
          mkdir build
          cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DSMCE_COVERAGE=On \
          -DSMCE_BUILD_STATIC=Off \
          -DSMCE_CXXRT_LINKING=SHARED \
          -DSMCE_BOOST_LINKING=SHARED \
          -DSMCE_OPENSSL_LINKING=SHARED \
          -S ./ -B ./build
      - name: CMake build
        run: cmake --build ./build
      - name: Build & Run tests
        run: |
          cmake --build ./build --target SMCE_Tests
          (cd build/test/; ctest --output-on-failure)
      - name: Collect coverage information
        run: |
          lcov --directory . --capture --output-file coverage.info
          lcov --remove coverage.info '/usr/*' "${HOME}"'/.cache/*' "$(pwd)/test/*" "$(pwd)/build/*" --output-file coverage.info
          lcov --list coverage.info
      - name: Upload coverage to Codecov
        run: |
          bash -c "$(curl -s https://codecov.io/bash)" -f coverage.info || echo "Codecov did not collect coverage reports"

  build-ubuntu:
    name: libSMCE - Ubuntu (${{ matrix.compiler.name }} & Boost ${{ matrix.boost.version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        compiler:
          - name: GCC 10
            c: gcc-10
            cxx: g++-10
          - name: Clang/LLVM 10
            c: clang-10
            cxx: clang++-10
        boost:
          - version: 1.74.0
            release: true
          - version: 1.75.0
            release: false
          - version: 1.76.0
            release: false
    env:
      CC: ${{ matrix.compiler.c }}
      CXX: ${{ matrix.compiler.cxx }}
    steps:
      - uses: actions/checkout@v2
      - name: Cache Boost
        id: cache-boost
        uses: actions/cache@v2
        with:
          path: boost_root
          key: ${{ runner.os }}-boost-${{ matrix.boost.version }}-pic
      - name: Install Boost
        if: steps.cache-boost.outputs.cache-hit != 'true'
        run: |
          export BOOST_ARK_BASENAME=$(echo ${{ matrix.boost.version }} | sed "s/^/boost_/;s/\./_/g")
          wget -qOboost_src.tgz https://boostorg.jfrog.io/artifactory/main/release/${{ matrix.boost.version }}/source/$BOOST_ARK_BASENAME.tar.gz
          tar -xzf ./boost_src.tgz
          mkdir boost_root
          cd $BOOST_ARK_BASENAME
          ./bootstrap.sh --prefix=../boost_root/
          ./b2 link=static cflags='-fPIC' install
          cd ../
      - name: Check deps
        run: |
          sudo apt install ninja-build
          ninja --version # technically not a dependency, but used to speedup builds
          cmake --version
          brew install arduino-cli
          arduino-cli version
          arduino-cli core install arduino:avr
      - name: CMake configure
        run: |
          export BOOST_ROOT="$(pwd)/boost_root"
          mkdir build
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DSMCE_CXXRT_LINKING=STATIC \
            -DSMCE_BOOST_LINKING=STATIC \
            -DSMCE_OPENSSL_LINKING=STATIC \
            -S ./ -B ./build
      - name: CMake build
        run: cmake --build ./build
      - name: Build & Run tests
        run: |
          cmake --build ./build --target SMCE_Tests
          (cd build/test/; ctest --output-on-failure)
      - name: Package
        run: |
          mkdir ./build/packages
          (cd build/; cpack -B packages)
          rm -rd build/packages/_CPack_Packages
      - name: Upload artifacts
        if: matrix.boost.release
        uses: 'actions/upload-artifact@v2'
        with:
          name: libSMCE-ubuntu-${{ matrix.compiler.c }}
          path: build/packages/*

  build-macos:
    name: libSMCE - macOS (${{ matrix.compiler.name }})
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        compiler:
          - name: GCC 10
            slug: gcc
            c: gcc-10
            cxx: g++-10
          - name: Clang/LLVM 11
            slug: clang
            c: clang-11
            cxx: clang++-11
          - name: AppleClang 12
            slug: appleclang
            c: clang
            cxx: clang++
    env:
      CC: ${{ matrix.compiler.c }}
      CXX: ${{ matrix.compiler.cxx }}
    steps:
      - uses: actions/checkout@v2
      - name: Check deps
        run: |
          brew install ninja arduino-cli
          ninja --version # technically not a dependency, but used to speedup builds
          cmake --version
          arduino-cli version
          arduino-cli core install arduino:avr
      - name: Cache Boost with GCC
        if: startsWith(matrix.compiler.name, 'GCC')
        id: cache-boost-gcc
        uses: actions/cache@v2
        with:
          path: |
            /usr/local/lib/cmake/Boost
            /usr/local/lib/cmake/boost_*
            /usr/local/Cellar/boost
          key: ${{ runner.os }}-boost176-gcc
      - name: Install Boost with GCC
        if: startsWith(matrix.compiler.name, 'GCC')
        run: |
          sed -e 's/bootstrap_args = %W\[/bootstrap_args = %W\[\
          --with-toolset=gcc/' -i '' /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/boost.rb
          brew install boost -s --cc=${{ matrix.compiler.c }}
          brew link boost
      - name: Install Boost with Clang
        if: (!startsWith(matrix.compiler.name, 'GCC'))
        run: brew install boost
      - name: CMake configure
        run: |
          [ "$CC" = "clang-11" ] && export CC="$(brew --prefix llvm)/bin/clang -stdlib=libc++ -nostdinc++ -I/usr/local/opt/llvm/include/c++/v1 -L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib -Wno-unused-command-line-argument"
          [ "$CXX" = "clang++-11" ] && export CXX="$(brew --prefix llvm)/bin/clang++ -stdlib=libc++ -nostdinc++ -I/usr/local/opt/llvm/include/c++/v1 -L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib -Wno-unused-command-line-argument"
          mkdir build
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl \
            -DSMCE_CXXRT_LINKING=STATIC \
            -DSMCE_BOOST_LINKING=STATIC \
            -DSMCE_OPENSSL_LINKING=STATIC \
            -S ./ -B ./build
      - name: CMake build
        run: cmake --build ./build
      - name: Build & Run tests
        run: |
          [ "$CC" = "clang-11" ] && export CC="$(brew --prefix llvm)/bin/clang -stdlib=libc++ -nostdinc++ -I/usr/local/opt/llvm/include/c++/v1 -L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib -Wno-unused-command-line-argument"
          [ "$CXX" = "clang++-11" ] && export CXX="$(brew --prefix llvm)/bin/clang++ -stdlib=libc++ -nostdinc++ -I/usr/local/opt/llvm/include/c++/v1 -L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib -Wno-unused-command-line-argument"
          cmake --build ./build --target SMCE_Tests
          (cd build/test/; ctest --output-on-failure)
      - name: Package
        run: |
          mkdir ./build/packages
          (cd build/; cpack -B packages)
          rm -rd build/packages/_CPack_Packages
      - name: Upload artifacts
        uses: 'actions/upload-artifact@v2'
        with:
          name: libSMCE-macos-${{ matrix.compiler.slug }}
          path: build/packages/*

  build-windows:
    name: libSMCE - Windows ${{ matrix.build_type }} (${{ matrix.compiler.name }} & Boost ${{ matrix.boost.version }})
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [Debug, Release]
        compiler:
          - name: MSVC
            c: cl
            cxx: cl
#         - name: Clang/LLVM
#           c: clang-cl
#           cxx: clang++-cl
        boost:
          - version: 1.74.0
            slug: 1_74_0
            release: false
          - version: 1.75.0
            slug: 1_75_0
            release: false
          - version: 1.76.0
            slug: 1_76_0
            release: true
#   env:
#     CC: ${{ matrix.compiler.c }}
#     CXX: ${{ matrix.compiler.cxx }}
    steps:
      - uses: actions/checkout@v2
      - run: mkdir C:\local
      - name: Cache Boost
        id: cache-boost
        uses: actions/cache@v2
        with:
          path: C:\local\boost_${{ matrix.boost.slug }}
          key: ${{ runner.os }}-boost-${{ matrix.boost.version }}-64bit
      - if: steps.cache-boost.outputs.cache-hit != 'true'
        shell: powershell
        run: .\ci\install-boost.ps1 '14.2' '${{ matrix.boost.version }}' '${{ matrix.boost.slug }}'
      - name: Check deps
        shell: bash
        run: |
          choco install ninja arduino-cli openssl > silence
          ninja --version
          arduino-cli version
          arduino-cli core install arduino:avr
      - uses: ilammy/msvc-dev-cmd@v1
      - name: CMake configure
        run: |
          mkdir build
          cmake -G Ninja `
            -DBOOST_ROOT=C:\local\boost_${{ matrix.boost.slug }} `
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} `
            -DSMCE_CXXRT_LINKING=SHARED `
            -DSMCE_BOOST_LINKING=STATIC `
            -DSMCE_OPENSSL_LINKING=STATIC `
            -S ./ -B ./build
      - name: CMake build
        run: cmake --build ./build
      #- name: Build & Run tests
      #  run: |
      #    cmake --build ./build --target SMCE_Tests
      #    cd build/test
      #    ctest --output-on-failure
      - name: Package
        run: |
          mkdir ./build/packages
          cd build
          cpack -B packages
          rm -R packages/_CPack_Packages
          cd ..
      - name: Upload artifacts
        if: matrix.boost.release
        uses: 'actions/upload-artifact@v2'
        with:
          name: libSMCE-windows-${{ matrix.compiler.c }}
          path: build/packages/*
  build-arch:
    name: libSMCE - ArchLinux (${{ matrix.compiler.name }})
    runs-on: ubuntu-latest
    container: archlinux:base-devel
    strategy:
      fail-fast: false
      matrix:
        compiler:
          - name: GCC
            c: gcc
            cxx: g++
          - name: Clang/LLVM
            c: clang
            cxx: clang++
    env:
      CC: ${{ matrix.compiler.c }}
      CXX: ${{ matrix.compiler.cxx }}
    steps:
      - run: cd ~
      - uses: actions/checkout@v2
      - name: Check deps
        run: |
          pacman -Syu --noconfirm git cmake boost openssl arduino-cli ninja
          if [ "${{ matrix.compiler.c }}" = "clang" ];
          then
            pacman -Syu --noconfirm clang
          fi
          ninja --version
          arduino-cli version
          arduino-cli core install arduino:avr
      - name: CMake configure
        run: |
          mkdir build
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DSMCE_CXXRT_LINKING=SHARED \
            -DSMCE_BOOST_LINKING=STATIC \
            -DSMCE_OPENSSL_LINKING=SHARED \
            -S ./ -B ./build
      - name: CMake build
        run: cmake --build ./build
      - name: Build & Run tests
        run: |
          cmake --build ./build --target SMCE_Tests
          cd build/test
          ctest --output-on-failure
# build-fedora:
#   name: libSMCE - Fedora Rawhide (${{ matrix.compiler.name }})
#   runs-on: ubuntu-latest
#   container: fedora:rawhide
#   strategy:
#     fail-fast: false
#     matrix:
#       compiler:
#         - name: GCC
#           c: gcc
#           cxx: g++
#           pkg: gcc-c++
#         - name: Clang/LLVM
#           c: clang
#           cxx: clang++
#           pkg: clang
#   env:
#     CC: ${{ matrix.compiler.c }}
#     CXX: ${{ matrix.compiler.cxx }}
#   steps:
#     - run: cd ~
#     - uses: actions/checkout@v2
#     - name: Check deps
#       run: |
#         dnf -y install ${{ matrix.compiler.pkg }} git cmake boost-devel openssl-devel ninja-build
#         curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | BINDIR=/usr/local/bin sh
#         ninja --version
#         arduino-cli version
#         arduino-cli core install arduino:avr
#     - name: CMake configure
#       run: |
#         mkdir build
#         cmake -G Ninja -DSMCE_CXXRT_LINKING=STATIC -S ./ -B ./build
#     - name: CMake build
#       run: cmake --build ./build
#     - name: Build & Run tests
#       run: |
#         cmake --build ./build --target SMCE_Tests
#         cd build/test
#         ctest --output-on-failure

  build-openmandriva:
    name: libSMCE - OpenMandriva Lx Cooker (${{ matrix.compiler.name }})
    runs-on: ubuntu-latest
    container: openmandriva/cooker:latest
    strategy:
      fail-fast: false
      matrix:
        compiler:
          - name: GCC
            pkg: gcc-c++
            c: gcc
            cxx: g++
          - name: Clang/LLVM
            pkg: clang
            c: clang
            cxx: clang++
    env:
      CC: ${{ matrix.compiler.c }}
      CXX: ${{ matrix.compiler.cxx }}
    steps:
      - run: cd ~
      - uses: actions/checkout@v2
      - name: Check deps
        run: |
          dnf -y install curl git cmake ninja ${{ matrix.compiler.pkg }} glibc-devel lib64boost-static-devel lib64openssl-devel
          curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | BINDIR=/usr/local/bin sh
          ninja --version
          arduino-cli version
          arduino-cli core install arduino:avr
      - name: CMake configure
        run: |
          mkdir build
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DSMCE_CXXRT_LINKING=SHARED \
            -DSMCE_BOOST_LINKING=STATIC \
            -DSMCE_OPENSSL_LINKING=SHARED \
            -S ./ -B ./build
      - name: CMake build
        run: cmake --build ./build
      - name: Build & Run tests
        run: |
          cmake --build ./build --target SMCE_Tests
          cd build/test
          ctest --output-on-failure

